#!/usr/bin/env node

let fs = require('fs');
let util = require('util');
let path = require('path');

const BASE_DIR = path.join(__dirname, '..');

/**
 * Wrap filesystem helpers in promisify so we can parallelize with async/await.
 */
let readdir = util.promisify(fs.readdir);
let writeFile = util.promisify(fs.writeFile);
let stat = util.promisify(fs.stat);
let exists = util.promisify(fs.exists);

const ENTRY_COMMONJS = 'index.js';
const ENTRY_ESM = 'index.esm.js';
const PREFIX_HIDDEN = '_';

/**
 * Template for all package.json files.
 */
const PKG_CONTENTS = `{
  "main": "./${ENTRY_COMMONJS}",
  "module": "./${ENTRY_ESM}",
  "sideEffects": false,
  "export": {
    "node": "./${ENTRY_COMMONJS}",
    "browser": "./${ENTRY_ESM}"
  }
}`;

async function generate(base) {
  // Get all subdirs
  let dirs = await readdir(base);

  // Remove private folders with hidden prefix
  let roots = dirs
    .filter((root) => !root.startsWith(PREFIX_HIDDEN))
    .map((root) => path.join(base, root));

  for await (let root of roots) {
    let info = await stat(root);
    // If the cursor isn't a directory, move on. We only care about directories
    // that need packages.
    if (!info.isDirectory()) {
      continue;
    }

    // Only generate a package if the directory has a CJS and ESM entry.
    let [hasCjs, hasEsm] = await Promise.all([
      exists(path.join(root, ENTRY_COMMONJS)),
      exists(path.join(root, ENTRY_ESM)),
    ]);

    if (!hasCjs && !hasEsm) {
      continue;
    }

    console.log('Generating', root);

    try {
      await writeFile(
        path.join(root, 'package.json'),
        Buffer.from(PKG_CONTENTS)
      );
    } catch (err) {
      console.error(err);
      process.exit(1);
    }

    // Traverse children;
    await generate(root);
  }
}

generate(path.join(BASE_DIR, 'build'));
